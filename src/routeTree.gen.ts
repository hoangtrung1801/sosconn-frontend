/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeRouteImport } from './routes/home'
import { Route as EmergencyManagementRouteImport } from './routes/emergency-management'
import { Route as CommunityRouteImport } from './routes/community'
import { Route as CitizenRouteImport } from './routes/citizen'
import { Route as AreaSelectionRouteImport } from './routes/area-selection'
import { Route as EopIndexRouteImport } from './routes/eop/index'
import { Route as EopReportRouteImport } from './routes/eop/report'
import { Route as EopEditRouteImport } from './routes/eop/edit'
import { Route as EopCreateRouteImport } from './routes/eop/create'
import { Route as EopAiGenerateRouteImport } from './routes/eop/ai-generate'

const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const EmergencyManagementRoute = EmergencyManagementRouteImport.update({
  id: '/emergency-management',
  path: '/emergency-management',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityRoute = CommunityRouteImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => rootRouteImport,
} as any)
const CitizenRoute = CitizenRouteImport.update({
  id: '/citizen',
  path: '/citizen',
  getParentRoute: () => rootRouteImport,
} as any)
const AreaSelectionRoute = AreaSelectionRouteImport.update({
  id: '/area-selection',
  path: '/area-selection',
  getParentRoute: () => rootRouteImport,
} as any)
const EopIndexRoute = EopIndexRouteImport.update({
  id: '/eop/',
  path: '/eop/',
  getParentRoute: () => rootRouteImport,
} as any)
const EopReportRoute = EopReportRouteImport.update({
  id: '/eop/report',
  path: '/eop/report',
  getParentRoute: () => rootRouteImport,
} as any)
const EopEditRoute = EopEditRouteImport.update({
  id: '/eop/edit',
  path: '/eop/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const EopCreateRoute = EopCreateRouteImport.update({
  id: '/eop/create',
  path: '/eop/create',
  getParentRoute: () => rootRouteImport,
} as any)
const EopAiGenerateRoute = EopAiGenerateRouteImport.update({
  id: '/eop/ai-generate',
  path: '/eop/ai-generate',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/area-selection': typeof AreaSelectionRoute
  '/citizen': typeof CitizenRoute
  '/community': typeof CommunityRoute
  '/emergency-management': typeof EmergencyManagementRoute
  '/home': typeof HomeRoute
  '/eop/ai-generate': typeof EopAiGenerateRoute
  '/eop/create': typeof EopCreateRoute
  '/eop/edit': typeof EopEditRoute
  '/eop/report': typeof EopReportRoute
  '/eop': typeof EopIndexRoute
}
export interface FileRoutesByTo {
  '/area-selection': typeof AreaSelectionRoute
  '/citizen': typeof CitizenRoute
  '/community': typeof CommunityRoute
  '/emergency-management': typeof EmergencyManagementRoute
  '/home': typeof HomeRoute
  '/eop/ai-generate': typeof EopAiGenerateRoute
  '/eop/create': typeof EopCreateRoute
  '/eop/edit': typeof EopEditRoute
  '/eop/report': typeof EopReportRoute
  '/eop': typeof EopIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/area-selection': typeof AreaSelectionRoute
  '/citizen': typeof CitizenRoute
  '/community': typeof CommunityRoute
  '/emergency-management': typeof EmergencyManagementRoute
  '/home': typeof HomeRoute
  '/eop/ai-generate': typeof EopAiGenerateRoute
  '/eop/create': typeof EopCreateRoute
  '/eop/edit': typeof EopEditRoute
  '/eop/report': typeof EopReportRoute
  '/eop/': typeof EopIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/area-selection'
    | '/citizen'
    | '/community'
    | '/emergency-management'
    | '/home'
    | '/eop/ai-generate'
    | '/eop/create'
    | '/eop/edit'
    | '/eop/report'
    | '/eop'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/area-selection'
    | '/citizen'
    | '/community'
    | '/emergency-management'
    | '/home'
    | '/eop/ai-generate'
    | '/eop/create'
    | '/eop/edit'
    | '/eop/report'
    | '/eop'
  id:
    | '__root__'
    | '/area-selection'
    | '/citizen'
    | '/community'
    | '/emergency-management'
    | '/home'
    | '/eop/ai-generate'
    | '/eop/create'
    | '/eop/edit'
    | '/eop/report'
    | '/eop/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AreaSelectionRoute: typeof AreaSelectionRoute
  CitizenRoute: typeof CitizenRoute
  CommunityRoute: typeof CommunityRoute
  EmergencyManagementRoute: typeof EmergencyManagementRoute
  HomeRoute: typeof HomeRoute
  EopAiGenerateRoute: typeof EopAiGenerateRoute
  EopCreateRoute: typeof EopCreateRoute
  EopEditRoute: typeof EopEditRoute
  EopReportRoute: typeof EopReportRoute
  EopIndexRoute: typeof EopIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/emergency-management': {
      id: '/emergency-management'
      path: '/emergency-management'
      fullPath: '/emergency-management'
      preLoaderRoute: typeof EmergencyManagementRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community': {
      id: '/community'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/citizen': {
      id: '/citizen'
      path: '/citizen'
      fullPath: '/citizen'
      preLoaderRoute: typeof CitizenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/area-selection': {
      id: '/area-selection'
      path: '/area-selection'
      fullPath: '/area-selection'
      preLoaderRoute: typeof AreaSelectionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/eop/': {
      id: '/eop/'
      path: '/eop'
      fullPath: '/eop'
      preLoaderRoute: typeof EopIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/eop/report': {
      id: '/eop/report'
      path: '/eop/report'
      fullPath: '/eop/report'
      preLoaderRoute: typeof EopReportRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/eop/edit': {
      id: '/eop/edit'
      path: '/eop/edit'
      fullPath: '/eop/edit'
      preLoaderRoute: typeof EopEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/eop/create': {
      id: '/eop/create'
      path: '/eop/create'
      fullPath: '/eop/create'
      preLoaderRoute: typeof EopCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/eop/ai-generate': {
      id: '/eop/ai-generate'
      path: '/eop/ai-generate'
      fullPath: '/eop/ai-generate'
      preLoaderRoute: typeof EopAiGenerateRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  AreaSelectionRoute: AreaSelectionRoute,
  CitizenRoute: CitizenRoute,
  CommunityRoute: CommunityRoute,
  EmergencyManagementRoute: EmergencyManagementRoute,
  HomeRoute: HomeRoute,
  EopAiGenerateRoute: EopAiGenerateRoute,
  EopCreateRoute: EopCreateRoute,
  EopEditRoute: EopEditRoute,
  EopReportRoute: EopReportRoute,
  EopIndexRoute: EopIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
